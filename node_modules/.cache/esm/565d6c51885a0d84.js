let jwt,User;_885‍.x([["default",()=>_885‍.o]]);_885‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_885‍.w("../models/user",[["default",["User"],function(v){User=v}]]);


const jwtMiddleware = async (ctx, next) => {
    console.log('jwtMiddleware 호출됨.');
    const token = ctx.cookies.get("access_token");
    if(!token)  return next(); // 토큰이 없음
    try{
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        ctx.state.user = {
            _id : decoded._id,
            username : decoded.username,
        };

        // 토큰의 남은 유효 기간이 3.5 미만이면 재발급
        const now = Math.floor(Date.now() / 1000);
        if(decoded.exp - now < 60 * 60 * 24 * 3.5) {
            const user = await User.findById(decoded._id);
            const token = user.generateToken();
            ctx.cookies.set('access_token', token, {
                maxAge : 1000 * 60 * 60 * 24 * 7, // 7일
                httpOnly : true
            });
        }
        _885‍.g.console.log(decoded);
        console.log('jwtMiddleware 토큰 인증 성공 다음으로 미들웨어로 진행 ');
        return next();
    } catch(e){
        // 토큰 검증 실패
        _885‍.g.console.log(e);
        return next();
    }
}

_885‍.d(jwtMiddleware);