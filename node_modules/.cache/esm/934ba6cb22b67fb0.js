let mongoose,Schema,bcrypt,jwt;_22b‍.x([["default",()=>_22b‍.o]]);_22b‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_22b‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_22b‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    username : String,
    hashedPassword : String,
});

UserSchema.methods.setPassword = async function(password){
    const hash = await bcrypt.hash(password, 10);
    this.hashedPassword = hash;
};

UserSchema.methods.checkPassword = async function(password){
    const result = await bcrypt.compare(password, this.hashedPassword);
    return result; // true or false
};

UserSchema.methods.serialize = function(){
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
};

UserSchema.statics.findByUsername = function(username){
    return this.findOne({username});
};

UserSchema.methods.generateToken = function(){
    const token = jwt.sign({
        // 첫 번째 파라미터에는 토큰 안에 집어놓고 싶은 데이터를 넣습니다.
        _id : this._id,
        username : this.username,
        },
        process.env.JWT_SECRET, // 두 번째 파라미터에는 JWT 암호를 넣습니다.
        {
            expiresIn : '7d', // 7일동안 유효합니다.
        }
    );
    return token;
};

const User = mongoose.model('User', UserSchema);

_22b‍.d(User);

